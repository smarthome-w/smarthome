rule "notification_rule"
when
    Member of gNotification changed
then
    val String type = "information"
    val String itemName = triggeringItem.name
    val itemValue = String.valueOf(triggeringItem.state)
    val String currentTime = String::format( "%1$tY-%1$tm-%1$td %1$tk:%1$tM:%1$tS", new java.util.Date )
    val String enableNotifications = String.valueOf(calendar_Notification.state)
    val String notificationString = type + "|" + itemName + "|" + itemValue + "|" + currentTime + "|" + enableNotifications
    NotificationItem.sendCommand(notificationString)
end

rule "alarm_notification_rule"
when
    Member of gPIR changed or Member of gCircuit changed
then
    if (GF_Motion_Mode.state.toString() == "ON" && triggeringItem.state == OPEN) {
      val String type = "alarm"
      val String itemName = triggeringItem.name
      val itemValue = String.valueOf(triggeringItem.state)
      val String currentTime = String::format( "%1$tY-%1$tm-%1$td %1$tk:%1$tM:%1$tS", new java.util.Date )
      val String enableNotifications = String.valueOf(calendar_Notification.state)
      val String notificationString = type + "|" + itemName + "|" + itemValue + "|" + currentTime + "|" + enableNotifications
      NotificationItem.sendCommand(notificationString)
    }
end

rule "error_notification_rule"
when
    Member of gErrors changed or Member of gAlert changed
then
    val String type = "error"
    val String itemName = triggeringItem.name
    val itemValue = String.valueOf(triggeringItem.state)
    val String currentTime = String::format( "%1$tY-%1$tm-%1$td %1$tk:%1$tM:%1$tS", new java.util.Date )
    val String enableNotifications = String.valueOf(calendar_Notification.state)
    val String notificationString = type + "|" + itemName + "|" + itemValue + "|" + currentTime + "|" + enableNotifications
    NotificationItem.sendCommand(notificationString)
end

rule "garage_notification_rule"
when
//    Member of gGarageState changed or Member of gGarageWindow changed
  Member of gGarageWindow changed
then
    val String type = "garage"
    val String itemName = triggeringItem.name
    val itemValue = String.valueOf(triggeringItem.state)
    val String currentTime = String::format( "%1$tY-%1$tm-%1$td %1$tk:%1$tM:%1$tS", new java.util.Date )
    val String enableNotifications = String.valueOf(calendar_Notification.state)
    val String notificationString = type + "|" + itemName + "|" + itemValue + "|" + currentTime + "|" + enableNotifications
    NotificationItem.sendCommand(notificationString)
end

rule "presence_notification_rule"
when
    Member of gTrackerPresence changed
then
    val String type = "presence"
    val String itemName = triggeringItem.name
    val itemValue = String.valueOf(triggeringItem.state)
    val String currentTime = String::format( "%1$tY-%1$tm-%1$td %1$tk:%1$tM:%1$tS", new java.util.Date )
    val String enableNotifications = String.valueOf(calendar_Notification.state)
    val String notificationString = type + "|" + itemName + "|" + itemValue + "|" + currentTime + "|" + enableNotifications
    NotificationItem.sendCommand(notificationString)
end

/*
rule "notification debug"
when
    Item DebugButton received update
then
    val String type = "debug"
    val String itemName = "DebugButton"
    val itemValue = String.valueOf(DebugButton.state)
    val String currentTime = String::format( "%1$tY-%1$tm-%1$td %1$tk:%1$tM:%1$tS", new java.util.Date )
    val String enableNotifications = String.valueOf(calendar_Notification.state)
    val String notificationString = type + "|" + itemName + "|" + itemValue + "|" + currentTime + "|" + enableNotifications
    NotificationItem.sendCommand(notificationString)
end
*/