rule "notification_rule"
when
    Member of gSlack changed
then
  try {
    val slack = triggeringItem

    val String currentTime = String::format( "%1$tY-%1$tm-%1$td %1$tk:%1$tM:%1$tS", new java.util.Date )
    var command = "/openhab/conf/scripts/SLACK/slack.sh ':information_source:' `" + currentTime + "` " + slack.name + " " + slack.state
    var result = executeCommandLine (command, 10000)
    if (result == "") {}
    //logInfo("slack", "command: {} with result:\n>>\n{}\n<<\n", command, result)
    slack.postUpdate(slack.state)
  } catch (Throwable t) {
    logError("Error", "Error in notification_rule {} {} {}", triggeringItem.name, triggeringItem.state, t.toString())
  } finally {
  }
end

rule "alarm_notification_rule"
when
    Member of gPIR changed or Member of gCircuit changed
then
  try {
    val slack = triggeringItem

    if (GF_Motion_Mode.state.toString() == "ALM" && slack.state == OPEN) {
      val String currentTime = String::format( "%1$tY-%1$tm-%1$td %1$tk:%1$tM:%1$tS", new java.util.Date )

      var command = "/openhab/conf/scripts/SLACK/slack.sh ':information_source:' `" + currentTime + "` " + slack.name + " " + slack.state
      var result = executeCommandLine (command, 10000)
      if (result == "") {}
      //logInfo("slack", "command: {} with result:\n>>\n{}\n<<\n", command, result)
      slack.postUpdate(slack.state)
    }
  } catch (Throwable t) {
    logError("Error", "Error in alarm_notification_rule {} {} {}", triggeringItem.name, triggeringItem.state, t.toString())
  } finally {
  }
end

rule "error_notification_rule"
when
    Member of gErrors changed or Member of gAlert changed
then
  try {
    val slack = triggeringItem
    var type = ""
    if (triggeringItem.state.toString().equals("OFF")) {
      type = ":ok:"
    } else {
      type = ":interrobang:"
    }
    val String currentTime = String::format( "%1$tY-%1$tm-%1$td %1$tk:%1$tM:%1$tS", new java.util.Date )

    var command = "/openhab/conf/scripts/SLACK/slack.sh '" + type + "' `" + currentTime + "` " + slack.name + " " + slack.state
    var result = executeCommandLine (command, 10000)
    if (result == "") {}
    //logInfo("slack", "command: {} with result:\n>>\n{}\n<<\n", command, result)
    slack.postUpdate(slack.state)
  } catch (Throwable t) {
    logError("Error", "Error in error_notification_rule {} {} {}", triggeringItem.name, triggeringItem.state, t.toString())
  } finally {
  }
end

rule "garage_notification_rule"
when
    Member of gGarageState changed or Member of gGarageWindow changed
then
  try {
    val slack = triggeringItem
    var type = ""
    if (triggeringItem.state.toString().equals("OFF")) {
      type = ":car:"
    } else {
      type = ":articulated_lorry:"
    }
    val String currentTime = String::format( "%1$tY-%1$tm-%1$td %1$tk:%1$tM:%1$tS", new java.util.Date )

    var command = "/openhab/conf/scripts/SLACK/slack.sh '" + type + "' `" + currentTime + "` " + slack.name + " " + slack.state
    var result = executeCommandLine (command, 10000)
    if (result == "") {}
    //logInfo("slack", "command: {} with result:\n>>\n{}\n<<\n", command, result)
    slack.postUpdate(slack.state)
  } catch (Throwable t) {
    logError("Error", "Error in error_notification_rule {} {} {}", triggeringItem.name, triggeringItem.state, t.toString())
  } finally {
  }
end

rule "presence_notification_rule"
when
    Member of gTrackerPresence changed
then
  try {
    val slack = triggeringItem
    var type = ""
    var status = ""
    if (triggeringItem.state.toString().equals("OPEN")) {
      type = ":cityscape:"
      status = "absent"
    } else {
      type = ":house:"
      status = "present"
    }
    val String currentTime = String::format( "%1$tY-%1$tm-%1$td %1$tk:%1$tM:%1$tS", new java.util.Date )

    var command = "/openhab/conf/scripts/SLACK/slack.sh '" + type + "' `" + currentTime + "` " + slack.name + " " + status
    var result = executeCommandLine (command, 10000)
    if (result == "") {}
    slack.postUpdate(slack.state)
  } catch (Throwable t) {
    logError("Error", "Error in error_notification_rule {} {} {}", triggeringItem.name, triggeringItem.state, t.toString())
  } finally {
  }
end
