  val saySomething = [ String ttsMessage, String voice |
    var boolean googleSuccess = false

    var i = 0
    while((i=i+1) <= 3 && !googleSuccess) {
      logInfo("Say info", "{} - bedroom - attempt {}", ttsMessage, i)
      try {
        logInfo("Say info", "------ SAY_START ------")
        say (ttsMessage, voice, "chromecast:chromecast:bedroom")
        var String result = executeCommandLine (Duration.ofSeconds(10), "/openhab/conf/scripts/GOOGLETTS/detect_error.sh", ttsMessage)
        if (result.contains("GoogleOK")) {
          googleSuccess = true
        }
      } catch (Throwable e) {
        logError("Say error", "{} - bedroom - attempt {}", ttsMessage, i)
      } finally {
        logInfo("Say info", "------ SAY_STOP  ------")
      }
    }

    if (googleSuccess) {
      logInfo("Say info", "{} - familyroom - attempt {}", ttsMessage, 1)
      say (ttsMessage, voice, "chromecast:chromecast:familyroom")
    }
    "executed"
]

val defaultVoice = "googletts:plPLStandardA"
//val defaultVoice = "googletts:enAUWavenetD"

val maleVoice = "googletts:plPLStandardB"

rule "say_main_lock_unlocked_rule"
when
  Time cron "0 */5 20-23 ? * *"
then
  var warningHour = 22
  if (HH_LockWarningHour.state !== NULL) {
    warningHour = (HH_LockWarningHour.state as Number).intValue
  }
  val hourOfDay = now.getHour as Number

  var ttsMessage = "Zamek jest otwarty."

  if (CIR_GF_MainLock.state.toString() == "OPEN" && hourOfDay >= warningHour) {
    saySomething.apply(ttsMessage, defaultVoice)
  }
end

rule "daily_info"
when
  Item GH_DailyInfo received update
then
  var externalTemp = (GF_FamilyRoom_Outdoor_Temperature_Sensor.state as Number).floatValue
  var externalTempSouth = (FF_AnnRoom_Outdoor_Temperature_Sensor.state as Number).floatValue
  var ttsMessage = ""

  if (GA_Garage_Heartbeat_LastUpdate_Error.state.toString() == "ON") {
    ttsMessage += " Błąd czujnika w garażu."
  } else {
    if (CIR_GA_Garage.state.toString() == "OPEN") {
      ttsMessage += " Garaż jest otwarty."
    } else {
      ttsMessage += " Garaż jest zamknięty."
    }
  }

  ttsMessage += String.format(" Temperatura na zewnątrz to %.0f\u00b0.", externalTemp)

//  if (Math::abs(externalTempSouth - externalTemp) >= 2) {
    ttsMessage += String.format(" Temperatura od strony północnej to %.0f\u00b0.", externalTempSouth)
//  }

  if (Tracker_Waldek_Heartbeat_LastUpdate_Error.state.toString() == "ON") {
    ttsMessage += " Błąd lokalizacji."
  } else {
    if (Alice_AtHome.state.toString() == "CLOSED") {
      ttsMessage += " Alicja jest poza domem."
    }
    if (Ann_AtHome.state.toString() == "CLOSED") {
      ttsMessage += " Ania jest poza domem."
    }
    if (Aldona_AtHome.state.toString() == "CLOSED") {
      ttsMessage += " Aldona jest poza domem."
    }
    if (Waldek_AtHome.state.toString() == "CLOSED") {
      ttsMessage += " Waldek jest poza domem."
    }
  }

  if (CIR_GF_MainLock.state.toString() == "OPEN") {
    ttsMessage += " Zamek jest otwarty."
  } else {
    ttsMessage += " Zamek jest zamknięty."
  }

  var long occupied_millis = 0
  if (FF_Bathroom_Entry_Time.state != NULL) {
    occupied_millis = (FF_Bathroom_Entry_Time.state as DateTimeType).zonedDateTime.toInstant.toEpochMilli
  } else {
    occupied_millis = now.toInstant.toEpochMilli
  }
  var now_millis = now.toInstant.toEpochMilli
  var occupation_duration = (now_millis - occupied_millis)/1000/60

  if (FF_BathRoom_Light_Up.state.toString() == "ON") {
    if (occupation_duration < 3) {
      ttsMessage += " Ktoś siedzi w łazience."
    } else {
      ttsMessage += String.format(" Ktoś siedzi w łazience od %d minut.", occupation_duration)
    }
    FF_Bathroom_Entry_Confirmation.postUpdate(ON)
  }

//  if (OverallErrorIndicator.state.toString() == "ON") {
//    ttsMessage += " Błąd czujnika."
//  } else {
//    ttsMessage += " Czujniki są sprawne."
//  }

  if (InternalSensorsErrorIndicator.state.toString() == "ON") {
    ttsMessage += " Błąd czujnika wewnętrznego."
  } else {
    ttsMessage += " Czujniki wewnętrzne są sprawne."
  }

  saySomething.apply(ttsMessage, defaultVoice)
  calendar_DailyInfo.postUpdate(OFF)
end

rule "calendar_info"
when
  Item calendar_DailyInfo changed to ON
then
  var externalTemp = (GF_FamilyRoom_Outdoor_Temperature_Sensor.state as Number).floatValue
  var externalTempSouth = (FF_AnnRoom_Outdoor_Temperature_Sensor.state as Number).floatValue
  var ttsMessage = String.format("Temperatura na zewnątrz to %.0f\u00b0.", externalTemp)

  ttsMessage += String.format(" Temperatura od strony północnej to %.0f\u00b0.", externalTempSouth)

  if (CIR_GF_MainLock.state.toString() == "OPEN") {
    ttsMessage += " Zamek jest otwarty."
  } else {
    ttsMessage += " Zamek jest zamknięty."
  }

  if (GF_Presence_Mode.state.toString() == "ON") {
    if (calendar_Vacation.state.toString() == "OFF") {
      saySomething.apply(ttsMessage, defaultVoice)
    }
  }
  calendar_DailyInfo.postUpdate(OFF)
end

rule "OverallErrorIndicator_Virtual_info"
when
  Item OverallErrorIndicator_Virtual received update
then
  var ttsMessage = ""
  logInfo("Overall error info", "OverallErrorIndicator_Virtual: {}", OverallErrorIndicator_Virtual)

  if (OverallErrorIndicator_Virtual.state.toString() == "ON") {
    ttsMessage += "Błąd czujnika."
  } else {
    ttsMessage += "Koniec błędu czujnika."
  }

  logInfo("Overall error info", "{}", ttsMessage)

  if (GF_Presence_Mode.state.toString() == "ON") {
    if (calendar_Vacation.state.toString() == "OFF") {
      saySomething.apply(ttsMessage, defaultVoice)
    }
  }
end

rule "sensor_info"
when
  Item GH_SensorsInfo received update
then
  var power = (GF_PowerMeter_Current_In_Watts.state as Number).floatValue
  logInfo("Chromecast", "power {}", power)
  var ttsMessage = String.format("Bieżące zużycie energii to %.0f wat.", power)

  if (GF_Presence_Mode.state.toString() == "ON") {
//    if (calendar_Vacation.state.toString() == "OFF") {
      saySomething.apply(ttsMessage, defaultVoice)
//    }
  }
//  calendar_DailyInfo.postUpdate(OFF)
end

rule "open_window_temperature_warning"
when
  Time cron "0 */10 6-23 ? * *"
then
  var warningTemperature = 10
  if (HH_OpenWindowTemperatureAlert.state !== NULL) {
    warningTemperature = (HH_OpenWindowTemperatureAlert.state as Number).intValue
  }
  var externalTemperature = (GF_FamilyRoom_Outdoor_Temperature_Sensor.state as Number).floatValue
  if (externalTemperature < warningTemperature) {
    var ttsMessage = String.format("Temperatura na zewnątrz to %.0f\u00b0. Poziom ostrzewagwczy to %d\u00b0.", externalTemperature, warningTemperature)

    var String openedWindows = "Otwarte: "
    var Boolean opened = false

    if (CIR_GF_FamilyBalcony.state.toString() == "OPEN") {
        openedWindows += " balkon w salonie,"
        opened = true
    }
    if (CIR_GF_FamilyRoom.state.toString() == "OPEN") {
        openedWindows += " okno w salonie,"
        opened = true
    }
    if (CIR_GF_Kitchen.state.toString() == "OPEN") {
        openedWindows += " okno w kuchni,"
        opened = true
    }
    if (CIR_FF_Bedroom.state.toString() == "OPEN") {
        openedWindows += " okno w sypialni,"
        opened = true
    }
    if (CIR_FF_AliceRoom.state.toString() == "OPEN") {
        openedWindows += " okno w pokoju Alicji,"
        opened = true
    }
    if (CIR_FF_AnnRoom.state.toString() == "OPEN") {
        openedWindows += " okno w pokoju Ani,"
        opened = true
    }

    if (opened) {
      ttsMessage = ttsMessage + " " + openedWindows
      saySomething.apply(ttsMessage, defaultVoice)
    }
  }
end

rule "bathroom_info"
when
  Item GH_BathroomInfo received update
then
  var ttsMessage = ""
  var long occupied_millis = 0
  if (FF_Bathroom_Entry_Time.state != NULL) {
    occupied_millis = (FF_Bathroom_Entry_Time.state as DateTimeType).zonedDateTime.toInstant.toEpochMilli
  } else {
    occupied_millis = now.toInstant.toEpochMilli
  }
  var now_millis = now.toInstant.toEpochMilli
  var occupation_duration = (now_millis - occupied_millis)/1000/60

  if (FF_BathRoom_Light_Up.state.toString() == "ON") {
    if (occupation_duration < 3) {
      ttsMessage = "Ktoś siedzi w łazience."
    } else {
      ttsMessage = String.format("Ktoś siedzi w łazience od %d minut.", occupation_duration)
    }
    FF_Bathroom_Entry_Confirmation.postUpdate(ON)
  } else {
    var int occupation_minutes = 0
    if (FF_Bathroom_Occupation_Minutes.state !== NULL) {
      occupation_minutes = Integer.parseInt(FF_Bathroom_Occupation_Minutes.state.toString())
    }
    FF_Bathroom_Occupation_Minutes.postUpdate(0)
    if (occupation_minutes > 0) {
      ttsMessage = String.format("Łazienka jest już wolna. Czas %d minut", occupation_minutes)
    } else {
      ttsMessage = String.format("Łazienka jest wolna.")
    }
  }
  if (GF_Presence_Mode.state.toString() == "ON") {
    saySomething.apply(ttsMessage, defaultVoice)
  }
end

rule "maintenace_rule"
when
  Item DebugButton received update
then
	var colorString = String::format("%s",transform("MAP", "led.map", "daycolor_" + "17"))
  logInfo("Debug", "{}", colorString)
end

rule "location_info"
when
  Item GH_LocationInfo received update
then
  var ttsMessage = ""

  if (Tracker_Waldek_Heartbeat_LastUpdate_Error.state.toString() == "ON") {
    ttsMessage += " Błąd lokalizacji."
  } else {
    if (Alice_AtHome.state.toString() == "CLOSED") {
      ttsMessage += " Alicja jest poza domem."
      ttsMessage += " Jej bieżąca lokalizacja to "
      ttsMessage += Tracker_Alice_Address.state.toString()
      ttsMessage += "."
    }
    if (Ann_AtHome.state.toString() == "CLOSED") {
      ttsMessage += " Ania jest poza domem."
      ttsMessage += " Jej bieżąca lokalizacja to "
      ttsMessage += Tracker_Ann_Address.state.toString()
      ttsMessage += "."
    }
    if (Aldona_AtHome.state.toString() == "CLOSED") {
      ttsMessage += " Aldona jest poza domem."
      ttsMessage += " Jej bieżąca lokalizacja to "
      ttsMessage += Tracker_Aldona_Address.state.toString()
      ttsMessage += "."
    }
    if (Waldek_AtHome.state.toString() == "CLOSED") {
      ttsMessage += " Waldek jest poza domem."
      ttsMessage += " Jego bieżąca lokalizacja to "
      ttsMessage += Tracker_Waldek_Address.state.toString()
      ttsMessage += "."
    }
  }
  saySomething.apply(ttsMessage, defaultVoice)
end
