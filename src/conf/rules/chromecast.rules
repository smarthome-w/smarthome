rule "say_main_lock_unlocked_rule"
when
  Time cron "0 */5 20-23 ? * *"
then
  var warningHour = 22
  if (HH_LockWarningHour.state !== NULL) {
    warningHour = (HH_LockWarningHour.state as Number).intValue
  }
  val hourOfDay = now.getHour as Number

  if (CIR_GF_MainLock.state.toString() == "OPEN" && hourOfDay >= warningHour) {
     say ("Zamek jest otwarty.", "googletts:plPLWavenetA", "chromecast:chromecast:familyroom")
     say ("Zamek jest otwarty.", "googletts:plPLWavenetA", "chromecast:chromecast:bedroom")
  }
end

rule "daily_info"
when
  Item calendar_DailyInfo changed to ON or Item GH_DailyInfo received update
then
  var externalTemp = (GF_FamilyRoom_Outdoor_Temperature_Sensor.state as Number).floatValue
  var ttsMessage = String.format("Na zewnątrz jest %.1f.", externalTemp)

  if (GF_Presence_Mode.state.toString() == "ON") {
    if (calendar_Vacation.state.toString() == "OFF") {
       say (ttsMessage, "googletts:plPLWavenetA", "chromecast:chromecast:familyroom")
       say (ttsMessage, "googletts:plPLWavenetA", "chromecast:chromecast:bedroom")
    }
  }
  calendar_DailyInfo.postUpdate(OFF)
end

rule "sensor_info"
when
  Item GH_SensorsInfo received update
then
  var power = (GF_PowerMeter_Current_In_Watts.state as Number).floatValue
  logInfo("Chromecast", "power {}", power)
  var ttsMessage = String.format("Bieżące zużycie energii to %.0f wat.", power)

  if (GF_Presence_Mode.state.toString() == "ON") {
    if (calendar_Vacation.state.toString() == "OFF") {
       say (ttsMessage, "googletts:plPLWavenetA", "chromecast:chromecast:familyroom")
       say (ttsMessage, "googletts:plPLWavenetA", "chromecast:chromecast:bedroom")
    }
  }
//  calendar_DailyInfo.postUpdate(OFF)
end

rule "open_window_temperature_warning"
when
  Time cron "0 */10 6-23 ? * *"
then
  var warningTemperature = 10
  if (HH_OpenWindowTemperatureAlert.state !== NULL) {
    warningTemperature = (HH_OpenWindowTemperatureAlert.state as Number).intValue
  }
  var externalTemperature = (GF_FamilyRoom_Outdoor_Temperature_Sensor.state as Number).floatValue
  if (externalTemperature < warningTemperature) {
    var ttsMessage = String.format("Na zewnątrz jest %.1f. Poziom ostrzewagwczy to %d stopni.", externalTemperature, warningTemperature)

    var String openedWindows = ""
    var Boolean opened = false

    if (CIR_GF_FamilyBalcony.state.toString() == "OPEN") {
        openedWindows += " balkon w salonie,"
        opened = true
    }
    if (CIR_GF_FamilyRoom.state.toString() == "OPEN") {
        openedWindows += " okno w salonie,"
        opened = true
    }
    if (CIR_GF_Kitchen.state.toString() == "OPEN") {
        openedWindows += " okno w kuchni,"
        opened = true
    }
    if (CIR_FF_Bedroom.state.toString() == "OPEN") {
        openedWindows += " okno w sypialni,"
        opened = true
    }
    if (CIR_FF_AliceRoom.state.toString() == "OPEN") {
        openedWindows += " okno w pokoju Alicji,"
        opened = true
    }
    if (CIR_FF_AnnRoom.state.toString() == "OPEN") {
        openedWindows += " okno w pokoju Ani,"
        opened = true
    }

    if (opened) {
       say (ttsMessage, "googletts:plPLWavenetA", "chromecast:chromecast:familyroom")
       say (ttsMessage, "googletts:plPLWavenetA", "chromecast:chromecast:bedroom")
    }
  }
end

rule "bathroom_info"
when
  Item GH_BathroomInfo received update
then
  var ttsMessage = ""
  var long occupied_millis = 0
  if (FF_Bathroom_Entry_Time.state != NULL) {
    occupied_millis = (FF_Bathroom_Entry_Time.state as DateTimeType).zonedDateTime.toInstant.toEpochMilli
  } else {
    occupied_millis = now.toInstant.toEpochMilli
  }
  var now_millis = now.toInstant.toEpochMilli
  var occupation_duration = (now_millis - occupied_millis)/1000/60

  if (FF_BathRoom_Light_Up.state.toString() == "ON") {
    if (occupation_duration < 3) {
      ttsMessage = "Ktoś siedzi w łazience."
    } else {
      ttsMessage = String.format("Ktoś siedzi w łazience od %d minut.", occupation_duration)
    }
    FF_Bathroom_Entry_Confirmation.postUpdate(ON)
  } else {
    var int occupation_minutes = 0
    if (FF_Bathroom_Occupation_Minutes.state !== NULL) {
      occupation_minutes = Integer.parseInt(FF_Bathroom_Occupation_Minutes.state.toString())
    }
    FF_Bathroom_Occupation_Minutes.postUpdate(0)
    if (occupation_minutes > 0) {
      ttsMessage = String.format("Łazienka jest już wolna. Czas %d minut", occupation_minutes)
    } else {
      ttsMessage = String.format("Łazienka jest wolna.")
    }
  }
  if (GF_Presence_Mode.state.toString() == "ON") {
//    if (calendar_Vacation.state.toString() == "OFF") {
       say (ttsMessage, "googletts:plPLWavenetA", "chromecast:chromecast:familyroom")
       say (ttsMessage, "googletts:plPLWavenetA", "chromecast:chromecast:bedroom")
//    }
  }
end


// 2021-12-28 13:26:06.739 [TRACE] [.googletts.internal.GoogleTTSService] - Google Cloud TTS voice: pl-PL-Standard-B
// 2021-12-28 13:26:06.906 [TRACE] [.googletts.internal.GoogleTTSService] - Google Cloud TTS voice: pl-PL-Standard-E
// 2021-12-28 13:26:07.040 [TRACE] [.googletts.internal.GoogleTTSService] - Google Cloud TTS voice: pl-PL-Wavenet-C
// 2021-12-28 13:26:07.239 [TRACE] [.googletts.internal.GoogleTTSService] - Google Cloud TTS voice: pl-PL-Wavenet-D
// 2021-12-28 13:26:07.577 [TRACE] [.googletts.internal.GoogleTTSService] - Google Cloud TTS voice: pl-PL-Standard-C
// 2021-12-28 13:26:07.727 [TRACE] [.googletts.internal.GoogleTTSService] - Google Cloud TTS voice: pl-PL-Wavenet-E
// 2021-12-28 13:26:08.001 [TRACE] [.googletts.internal.GoogleTTSService] - Google Cloud TTS voice: pl-PL-Standard-A
// 2021-12-28 13:26:08.034 [TRACE] [.googletts.internal.GoogleTTSService] - Google Cloud TTS voice: pl-PL-Standard-D
// 2021-12-28 13:26:08.195 [TRACE] [.googletts.internal.GoogleTTSService] - Google Cloud TTS voice: pl-PL-Wavenet-B
// 2021-12-28 13:26:08.251 [TRACE] [.googletts.internal.GoogleTTSService] - Google Cloud TTS voice: pl-PL-Wavenet-A
