rule "rollershutter"
when
    Member of gRollershutter changed
then
  try {
    var int logLevel = 6
    if (HH_DebugLevel_Rollershutter.state !== NULL) {
      logLevel = HH_DebugLevel_Scene.state as Number
    }

    //logInfo("rollershutter", "Rollershutter change detected {} {}", triggeringItem.name, triggeringItem.state)
    var lastupdate_item = gLastUpdateRollershutter.members.findFirst[name.equals(triggeringItem.name + "_LastUpdate")]

    //logInfo("rollershutter", "lastupdate_item {}", lastupdate_item)
    if (lastupdate_item !== null) {
      lastupdate_item.postUpdate(now.toString())
      //logInfo("rollershutter", "Last update item {} {}", lastupdate_item.name, lastupdate_item.state)
    }
  } catch (Throwable t) {
    logError("Error", "Error in rollershutter_rule {} {} {}", triggeringItem.name, triggeringItem.state, t.toString)
  } finally {
  }
end

rule "rollershutter_down_rule"
when
    Item calendar_Dusk changed
then
  try {
    var int logLevel = 6
    if (HH_DebugLevel_Rollershutter.state !== NULL) {
      logLevel = HH_DebugLevel_Scene.state as Number
    }
    if (GF_Presence_Mode.state.toString() == "PRESENT") {
        if (calendar_Dusk.state.toString() == "ON") {
          GH_Evening_Scene.sendCommand(ON)
          logInfo("dailytrigger", "Time: {}, Elevation: {}, Light: {}", now, Astro_SunElevation.state, GF_FamilyRoom_Analog_Sensor.state)
        }
    }
  } catch (Throwable t) {
    logError("Error", "Error in rollershutter_down_rule {} {} {}", triggeringItem.name, triggeringItem.state, t.toString)
  } finally {
  }
end

rule "rollershutter_up_rule"
when
    Item calendar_Dawn changed
then
  try {
    var int logLevel = 6
    if (HH_DebugLevel_Rollershutter.state !== NULL) {
      logLevel = HH_DebugLevel_Scene.state as Number
    }
    if (GF_Presence_Mode.state.toString() == "PRESENT") {
        if (calendar_Dawn.state.toString() == "ON") {
          GH_Day_Scene.sendCommand(ON)
          logInfo("dailytrigger", "Time: {}, Elevation: {}, Light: {}", now, Astro_SunElevation.state, GF_FamilyRoom_Analog_Sensor.state)
        }
    }
  } catch (Throwable t) {
    logError("Error", "Error in rollershutter_up_rule {} {} {}", triggeringItem.name, triggeringItem.state, t.toString)
  } finally {
  }
end
