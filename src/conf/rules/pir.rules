import java.util.Map

val Map<String, Timer> timers = newHashMap

rule "pir_rule"
when
    Member of gPIR received update
then
  var ddd = ""
  try {
    var int logLevel = 6
    ddd += "a"
    if (HH_DebugLevel_PIRCIR.state !== NULL) {
      logLevel = (HH_DebugLevel_PIRCIR.state as Number).intValue
    }
    if (logLevel >= 6) {
      logError("pir", "PIR change detected {} {}", triggeringItem.name, triggeringItem.state)
    }
    if (triggeringItem.state == OPEN) {
      var int timeOutMinutes = 2
      if (HH_PIR_State_Timeout.state !== NULL) {
        timeOutMinutes = (HH_PIR_State_Timeout.state as Number).intValue
      }
      ddd += "b"

      if(timers.get(triggeringItem.name) === null){
          // find appropriate Item state
          if (logLevel >= 6) {
            logError("pir", "Creating motion end timer for item {}", triggeringItem.name)
          }
          val state_item = gPIRState.members.findFirst[name.equals(triggeringItem.name + "_State")]
          timers.put(triggeringItem.name, createTimer(now.plusMinutes(timeOutMinutes), [|
              state_item.sendCommand(OFF)
              timers.put(triggeringItem.name, null)
          ]))
          if (logLevel >= 6) {
            logError("pir", "State item {}", state_item.name)
          }
          state_item.postUpdate(ON)
          ddd += "c"
      }
      else {
          if (logLevel >= 6) {
            logError("pir", "Reschedule {} with {} minutes", triggeringItem.name, timeOutMinutes)
          }
          timers.get(triggeringItem.name).reschedule(now.plusMinutes(timeOutMinutes))
          ddd += "d"
      }
      ddd += "e"
      var lastupdate_item = gLastUpdatePIR.members.findFirst[name.equals(triggeringItem.name + "_LastUpdate")]
      ddd += "f"
      if (logLevel >= 6) {
        logError("pir", "Last update item {} (1)", lastupdate_item)
      }
      if (lastupdate_item !== null) {
        lastupdate_item.postUpdate(now.toString())
        if (logLevel >= 6) {
          logError("pir", "Last update item {} {} (2)", lastupdate_item.name, lastupdate_item.state)
        }
      }
      ddd += "g"
    }
  } catch (Throwable t) {
    logError("Error", "Error in pir_rule {} {} {} {}", ddd, triggeringItem.name, triggeringItem.state, t.toString())
  } finally {
  }
end
