rule "irb_rule"
when
    Member of gIRB received update
then
  try {
    var int logLevel = 6
    if (HH_DebugLevel_Broadlink.state !== NULL) {
      logLevel = (HH_DebugLevel_Broadlink.state as Number).intValue
    }
    if (logLevel >= 6) {
      logError("irb", "IRB change detected {} {}", triggeringItem.name, triggeringItem.state)
    }
    var String command = "/openhab/conf/scripts/BROADLINK/ir.py " + triggeringItem.name + " " + triggeringItem.state
    var long duration = now.millis
    var result = executeCommandLine (command, 15000)
    duration = now.millis - duration
    if (!result.contains("==sent==")) {
      if (logLevel >= 2) {
        logError("irb", "command: {}, duration: {} with result:>> {} <<", command, duration, result)
      }
    }
    val lastupdate_item = gLastUpdate.members.findFirst[name.equals(triggeringItem.name + "_LastUpdate")]

    if (lastupdate_item !== null) {
      lastupdate_item.postUpdate(now.toString())
      if (logLevel >= 6) {
        logError("irb", "Last update item {} {}", lastupdate_item.name, lastupdate_item.state)
      }
    }
  } catch (Throwable t) {
    logError("Error", "Error in irb_rule {} {} {}", triggeringItem.name, triggeringItem.state, t.toString)
  } finally {
  }
end

rule "sp2_rule"
when
    Member of gSP2 received update
then
  try {
    var int logLevel = 6
    if (HH_DebugLevel_Broadlink.state !== NULL) {
      logLevel = (HH_DebugLevel_Broadlink.state as Number).intValue
    }
    if (logLevel >= 6) {
      logError("sp2", "SP2 change detected {} {}", triggeringItem.name, triggeringItem.state)
    }
    var String command = "/openhab/conf/scripts/BROADLINK/sp2.py " + triggeringItem.name + " " + triggeringItem.state
    var long duration = now.millis
    var result = executeCommandLine (command, 15000)
    duration = now.millis - duration
    if (!result.contains("==sent==")) {
      if (logLevel >= 2) {
        logInfo("sp2", "command: {}, duration: {} with result:>> {} <<", command, duration, result)
      }
    }
    val lastupdate_item = gLastUpdate.members.findFirst[name.equals(triggeringItem.name + "_LastUpdate")]
    if (lastupdate_item !== null) {
      lastupdate_item.postUpdate(now.toString())
      if (logLevel >= 6) {
        logInfo("sp2", "Last update item {} {}", lastupdate_item.name, lastupdate_item.state)
      }
    }
  } catch (Throwable t) {
    logError("Error", "Error in sp2_rule {} {} {}", triggeringItem.name, triggeringItem.state, t.toString)
  } finally {
  }
end

rule "tc2_rule"
when
    Member of gTC2 received update
then
  try {
    var int logLevel = 6
    if (HH_DebugLevel_Broadlink.state !== NULL) {
      logLevel = (HH_DebugLevel_Broadlink.state as Number).intValue
    }
    if (logLevel >= 6) {
      logError("tc2", "TC2 change detected {} {}", triggeringItem.name, triggeringItem.state)
    }
    var String command = "/openhab/conf/scripts/BROADLINK/tc2.py " + triggeringItem.name + " " + triggeringItem.state
    var long duration = now.millis
    var result = executeCommandLine (command, 15000)
    duration = now.millis - duration
    if (!result.contains("==sent==")) {
      if (logLevel >= 2) {
        logInfo("tc2", "command: {}, duration: {} with result:>> {} <<", command, duration, result)
      }
    }
    val lastupdate_item = gLastUpdate.members.findFirst[name.equals(triggeringItem.name + "_LastUpdate")]
    if (lastupdate_item !== null) {
      lastupdate_item.postUpdate(now.toString())
      if (logLevel >= 6) {
        logInfo("sp2", "Last update item {} {}", lastupdate_item.name, lastupdate_item.state)
      }
    }
  } catch (Throwable t) {
    logError("Error", "Error in tc2_rule {} {} {}", triggeringItem.name, triggeringItem.state, t.toString)
  } finally {
  }
end

rule "irrgb_rule"
when
    Member of gIRRGB received update
then
  try {
    var int logLevel = 6
    if (HH_DebugLevel_Broadlink.state !== NULL) {
      logLevel = (HH_DebugLevel_Broadlink.state as Number).intValue
    }
    if (logLevel >= 6) {
      logError("irrgb", "IR RGB change detected {} {}", triggeringItem.name, triggeringItem.state)
    }
    var String command = "/openhab/conf/scripts/BROADLINK/irrgb.py " + triggeringItem.name + " " + triggeringItem.state
    var long duration = now.millis
    var result = executeCommandLine (command, 15000)
    duration = now.millis - duration
    if (!result.contains("==sent==")) {
      if (logLevel >= 2) {
        logInfo("irrgb", "command: {}, duration: {} with result:>> {} <<", command, duration, result)
      }
    }
  } catch (Throwable t) {
    logError("Error", "Error in irrgb_rule {} {} {}", triggeringItem.name, triggeringItem.state, t.toString)
  } finally {
  }
end
