var errOverallError = false
var int errLogLevel = 1

rule "err_rule"
when
  Time cron "0 */5 * ? * MON-SUN"
then
  try {
    // errLogLevel = 6
    if (HH_DebugLevel_General.state !== NULL) {
      errLogLevel = (HH_DebugLevel_General.state as Number).intValue
    }
    gLastUpdateTimeout.members.forEach [E |
      var Number diff = 20
      if (E.state !== NULL) {
        var DateTimeType previous = E.state as DateTimeType
        diff = (now.toInstant.toEpochMilli - previous.zonedDateTime.toInstant.toEpochMilli) / 1000 / 60
        // diff = Minutes::minutesBetween(new DateTime(previous.zonedDateTime.toInstant.toEpochMilli), now).getMinutes()
      }
      if (errLogLevel >= 6) {
        logInfo("Errors detection", "item: {}, diff: {}", E.name, diff)
      }
      val SwitchItem errorIndicator = (gErrors.members.findFirst[name.equals(E.name + "_Error")] as SwitchItem)

      if (errorIndicator !== null) {
        if (diff >= 15) {
          sendCommand (errorIndicator, ON)
        } else {
          sendCommand (errorIndicator, OFF)
        }
      }
    ]
  } catch (Throwable t) {
    logError("Error", "Error in err_rule {}", t.toString())
  } finally {
  }
end

rule "error_flag_rule"
when
    Member of gErrors changed or
    Time cron "0 */5 * ? * MON-SUN"
then
  try {
    errOverallError = false
    gErrors.members.forEach [E |
      if (E.state == NULL || E.state == ON) {
        errOverallError = true
      }
    ]
    if (errOverallError == true) {
      OverallErrorIndicator.state = ON
      OverallErrorIndicator_Virtual.state = ON
    } else {
      OverallErrorIndicator.state = OFF
      OverallErrorIndicator_Virtual.state = OFF
    }
  } catch (Throwable t) {
    logError("Error", "Error in error_flag_rule {} {} {}", triggeringItem.name, triggeringItem.state, t.toString())
  } finally {
  }
end
