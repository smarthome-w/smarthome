rule "entrywatch_rule"
when
  Item PIR_GF_EntryWatch_State received update or
  Item PIR_Corridor_Storage_State received update
then
  try {
    var int logLevel = 6
    if (HH_DebugLevel_PIRCIR.state !== NULL) {
        logLevel = (HH_DebugLevel_PIRCIR.state as Number).intValue
    }
    if (logLevel >= 6) {
      logError("entrywatch_rule", "Entrywatch change detected {} {}", triggeringItem.name, triggeringItem.state)
    }
    if (triggeringItem.state !== NULL){
      if (triggeringItem.state == ON) {
        sendCommand(GF_Corridor_Storage, ON)
      } else {
        sendCommand(GF_Corridor_Storage, OFF)
      }
    }
  } catch (Throwable t) {
    logError("Error", "Error in entrywatch_rule {} {} {}", triggeringItem.name, triggeringItem.state, t.toString)
  } finally {
  } 
end

rule "entrywatch_rule_1"
when
  Item PIR_Corridor_Storage changed to OPEN
then
  try {
    Thread::sleep(2000)
    PIR_Corridor_Storage.sendCommand(CLOSED)
  } catch (Throwable t) {
    logError("Error", "Error in entrywatch_rule_1 {} {} {}", triggeringItem.name, triggeringItem.state, t.toString)
  } finally {
  }
end