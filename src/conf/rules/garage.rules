rule "garage_entry_light"
when
  Item CIR_GA_Garage changed to OPEN
then
  try {
    GA_Garage_Entry_Time.postUpdate(new DateTimeType())
    if (calendar_SupportingLight.state.toString() == "ON" || GF_Winter_Mode.state.toString() == "ON") {
        GA_Garage_Cross.sendCommand(ON)
    }
  } catch (Throwable t) {
    logError("Error", "Error in garage_entry_light {}", t.toString())
  } finally {
  }
end

rule "garage_exit_light"
when
  Item CIR_GA_Garage changed to CLOSED
then
  try {
    GA_Garage_Cross.sendCommand(OFF)

    if (GA_Garage_Entry_Confirmation.state.toString() == "ON") {
      var occupied_millis = (GA_Garage_Entry_Time.state as DateTimeType).zonedDateTime.toInstant.toEpochMilli
      var now_millis = now.toInstant.toEpochMilli
      var occupation_duration = (now_millis - occupied_millis)/1000/60
      GA_Garage_Occupation_Minutes.postUpdate(occupation_duration)
      GA_Garage_Entry_Confirmation.postUpdate(OFF)
      GA_GarageInfo.postUpdate(ON)
      logInfo("Chromecast", "GA_Garage_Occupation_Minutes - {}", GA_Garage_Occupation_Minutes)

    }
    GA_Garage_Entry_Time.postUpdate(new DateTimeType())
  } catch (Throwable t) {
    logError("Error", "Error in garage_exit_light {}", t.toString())
  } finally {
  }
end
