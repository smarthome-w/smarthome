rule "family_room_led_power"
when
    Item WiFiLEDFamilyRoom_power received update
then
    WiFiLED5_power.sendCommand(triggeringItem.state.toString())
    WiFiLED6_power.sendCommand(triggeringItem.state.toString())
    WiFiLED7_power.sendCommand(triggeringItem.state.toString())
end

rule "family_room_led_color"
when
    Item WiFiLEDFamilyRoom_color received update
then
    WiFiLED5_color.sendCommand(triggeringItem.state.toString())
    WiFiLED6_color.sendCommand(triggeringItem.state.toString())
    WiFiLED7_color.sendCommand(triggeringItem.state.toString())
end

rule "family_room_led_dimmer"
when
    Item WiFiLEDFamilyRoom_dimmer received update
then
    WiFiLED5_dimmer.sendCommand(triggeringItem.state.toString())
    WiFiLED6_dimmer.sendCommand(triggeringItem.state.toString())
    WiFiLED7_dimmer.sendCommand(triggeringItem.state.toString())
end

rule "alice_led_on"
when
//    Time cron "0 55 5 ? * MON,WED" or
//    Time cron "0 50 6 ? * TUE,THU,FRI"
//    Time cron "0 40 7 ? * MON,TUE,WED,THU,FRI"
    Time cron "0 40 5 ? * MON,TUE,WED,THU,FRI"
then
    if (GF_Presence_Mode.state.toString() == "PRESENT") {
        if (HH_AliceAtSchool.state.toString() == "ON") {
            WiFiLED2_power.sendCommand(ON)
        }
    }
end

rule "alice_led_off"
when
//    Time cron "0 15 6 ? * MON,WED" or
//    Time cron "0 15 7 ? * TUE,THU,FRI" or
    Time cron "0 20 6 ? * MON,TUE,WED,THU,FRI" or
    Time cron "59 59 23 ? * *"
then
    if (GF_Presence_Mode.state.toString() == "PRESENT") {
        WiFiLED2_power.sendCommand(OFF)
    }
end

rule "ann_led_on"
when
//    Time cron "0 40 5 ? * MON,TUE,THU" or
//    Time cron "0 10 6 ? * WED,FRI"
//    Time cron "0 40 7 ? * MON,TUE,WED,THU,FRI"
    Time cron "0 40 5 ? * MON,TUE,WED,THU,FRI"
then
    logInfo ("lock", "Ann led: before on")

    if (GF_Presence_Mode.state.toString() == "PRESENT") {
        if (HH_AnnAtSchool.state.toString() == "ON") {
            WiFiLED3_power.sendCommand(ON)
        }
    }
end

rule "ann_led_off"
when
//    Time cron "0 20 6 ? * MON,TUE,THU" or
//    Time cron "0 50 6 ? * WED,FRI" or
//    Time cron "0 58 7 ? * MON,TUE,WED,THU,FRI" or
    Time cron "0 20 6 ? * MON,TUE,WED,THU,FRI" or
    Time cron "59 59 23 ? * *"
then
    logInfo ("lock", "Ann led: before off")
    if (GF_Presence_Mode.state.toString() == "PRESENT") {
        WiFiLED3_power.sendCommand(OFF)
    }
end

rule "waldek_led_on"
when
    Time cron "0 0 8 ? * MON,TUE,WED,THU,FRI"
then
    logInfo ("waldek_led_on", "waldek_led_on: {}", HH_WaldekAtWork.state.toString())
    if (GF_Presence_Mode.state.toString() == "PRESENT") {
        if (calendar_Vacation.state.toString() == "OFF") {
            if (HH_WaldekAtWork.state.toString() == "ON") {
                logInfo ("waldek_led_on", "try: waldek_led_on: {}", HH_WaldekAtWork.state.toString())
                WiFiLED4_power.sendCommand(ON)
                HH_PowermeterPlug02.sendCommand(ON)
            }
        }
    }
end

rule "waldek_led_off"
when
    Time cron "0 55 14 ? * MON,TUE,WED,THU,FRI"
then
    if (GF_Presence_Mode.state.toString() == "PRESENT") {
        WiFiLED4_power.sendCommand(OFF)
    }
end

rule "goodnight_all_off"
when
    Time cron "0 0 1 ? * *"
then
    GH_Bedroom_Night_Scene.sendCommand(OFF)
end

rule "debug_desk"
when
    Item WiFiLED4_power received update
then
    if (WiFiLED4_power.state.toString() == "OFF") {
        val hsb = new HSBType("107, 100, 0")
        sendCommand(WiFiLED4_color, hsb)
//        WiFiLED4_dimmer.sendCommand(0)
//        logInfo ("debug desk", "debug desk: {}", hsb)
    } else {
        val hsb = new HSBType("107, 100, 50")
        sendCommand(WiFiLED4_color, hsb)
//        logInfo ("debug desk", "debug desk: {}", hsb)
    }
end
