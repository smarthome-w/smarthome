import java.util.Map

val Map<String, Timer> nightwatchTimers = newHashMap

rule "nightwatch_rule"
when
    Member of gNightWatch received update
then
  try {
    var int logLevel = 6
    if (HH_DebugLevel_Nightwatch.state !== NULL) {
        logLevel = (HH_DebugLevel_Nightwatch.state as Number).intValue
    }
    if (logLevel >= 6) {
      logError("nightwatch_rule", "Nightwatch change detected {} {}", triggeringItem.name, triggeringItem.state)
    }

    var nightwatchTimerName = "corridorNightwatchTimer"
    if (triggeringItem.name == "PIR_GF_Kitchen") {
      nightwatchTimerName = "kitchenNightwatchTimer"
    }

    if (logLevel >= 6) {
      logError("nightwatch_rule", "nightwatchTimerName: {}", nightwatchTimerName)
    }

    if (GF_Presence_Mode.state.toString() == "PRESENT") {
        if (calendar_SupportingLight.state.toString() == "ON" || DemoMode.state.toString() == "ON") {
          if (triggeringItem.state == OPEN) {
            var int timeOutMinutes = 2
            if (HH_PIR_State_Timeout.state !== NULL) {
              timeOutMinutes = (HH_PIR_State_Timeout.state as Number).intValue
            }
            if(nightwatchTimers.get(nightwatchTimerName) === null){
                nightwatchTimers.put(nightwatchTimerName, createTimer(now.plusMinutes(timeOutMinutes), [|
                    nightwatchTimers.put(nightwatchTimerName, null)
                    if (logLevel >= 6) {
                      logError("nightwatch_rule", "Timer expired {}", nightwatchTimerName)
                    }
                    // off
                    if (nightwatchTimerName == "corridorNightwatchTimer") {
                      GF_Corridor_Light_LED.sendCommand(OFF)
                    } else {
                      GF_Kitchen_LED.sendCommand(OFF);
                    }
                ]))
                if (logLevel >= 6) {
                  logError("nightwatch_rule", "Timer created {}", nightwatchTimerName)
                }
                //on
                if (nightwatchTimerName == "corridorNightwatchTimer") {
                  GF_Corridor_Light_LED.sendCommand(ON)
                } else {
                  GF_Kitchen_LED.sendCommand(ON);
                }
            }
            else {
                nightwatchTimers.get(nightwatchTimerName).reschedule(now.plusMinutes(timeOutMinutes))
                if (logLevel >= 6) {
                  logError("nightwatch_rule", "Timer rescheduled {}", nightwatchTimerName)
                }
                if (nightwatchTimerName == "corridorNightwatchTimer") {
                  GF_Corridor_Light_LED.sendCommand(ON)
                } else {
                  GF_Kitchen_LED.sendCommand(ON);
                }
            }
          }
        }
    }
  } catch (Throwable t) {
    logError("Error", "Error in nightwatch_rule {} {} {}", triggeringItem.name, triggeringItem.state, t.toString())
  } finally {
  }
end
