import java.util.Map

val Map<String, Timer> nightwatchTimers = newHashMap

rule "nightwatch_rule"
when
    Member of gNightWatch received update
then
  try {
    val nightwatchTimerName = "nightwatchTimer"
    if (GF_Presence_Mode.state.toString() == "PRESENT") {
        if (calendar_SupportingLight.state.toString() == "ON") {
          if (triggeringItem.state == OPEN) {
            var int timeOutMinutes = 2
            if (HH_PIR_State_Timeout.state !== NULL) {
              timeOutMinutes = (HH_PIR_State_Timeout.state as Number).intValue
            }
            if(nightwatchTimers.get(nightwatchTimerName) === null){
                nightwatchTimers.put(nightwatchTimerName, createTimer(now.plusMinutes(timeOutMinutes), [|
                    nightwatchTimers.put(nightwatchTimerName, null)
                    //logInfo("nightwatch", "Timer expired {}", nightwatchTimerName)
                    // off
                    GF_Corridor_Light_LED.sendCommand(OFF)
                ]))
                //logInfo("nightwatch", "Timer created {}", nightwatchTimerName)
                //on
                GF_Corridor_Light_LED.sendCommand(ON)
            }
            else {
                nightwatchTimers.get(nightwatchTimerName).reschedule(now.plusMinutes(timeOutMinutes))
                //logInfo("nightwatch", "Timer rescheduled {}", nightwatchTimerName)
                GF_Corridor_Light_LED.sendCommand(ON)
            }
          }
        }
    }
  } catch (Throwable t) {
    logError("Error", "Error in nightwatch_rule {} {} {}", triggeringItem.name, triggeringItem.state, t.toString)
  } finally {
  }
end
